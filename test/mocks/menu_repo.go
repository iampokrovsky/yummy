// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/menu/repo/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "yummy/internal/app/menu/model"

	gomock "github.com/golang/mock/gomock"
)

// MockMenuRepo is a mock of MenuRepo interface.
type MockMenuRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMenuRepoMockRecorder
}

// MockMenuRepoMockRecorder is the mock recorder for MockMenuRepo.
type MockMenuRepoMockRecorder struct {
	mock *MockMenuRepo
}

// NewMockMenuRepo creates a new mock instance.
func NewMockMenuRepo(ctrl *gomock.Controller) *MockMenuRepo {
	mock := &MockMenuRepo{ctrl: ctrl}
	mock.recorder = &MockMenuRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuRepo) EXPECT() *MockMenuRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMenuRepo) Create(ctx context.Context, items ...model.MenuItem) ([]uint64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMenuRepoMockRecorder) Create(ctx interface{}, items ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMenuRepo)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockMenuRepo) Delete(ctx context.Context, ids ...uint64) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMenuRepoMockRecorder) Delete(ctx interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMenuRepo)(nil).Delete), varargs...)
}

// GetByID mocks base method.
func (m *MockMenuRepo) GetByID(ctx context.Context, id uint64) (model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMenuRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMenuRepo)(nil).GetByID), ctx, id)
}

// ListByID mocks base method.
func (m *MockMenuRepo) ListByID(ctx context.Context, ids ...uint64) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByID", varargs...)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByID indicates an expected call of ListByID.
func (mr *MockMenuRepoMockRecorder) ListByID(ctx interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByID", reflect.TypeOf((*MockMenuRepo)(nil).ListByID), varargs...)
}

// ListByName mocks base method.
func (m *MockMenuRepo) ListByName(ctx context.Context, name string) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", ctx, name)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByName indicates an expected call of ListByName.
func (mr *MockMenuRepoMockRecorder) ListByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockMenuRepo)(nil).ListByName), ctx, name)
}

// ListByRestaurantID mocks base method.
func (m *MockMenuRepo) ListByRestaurantID(ctx context.Context, restId uint64) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRestaurantID", ctx, restId)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRestaurantID indicates an expected call of ListByRestaurantID.
func (mr *MockMenuRepoMockRecorder) ListByRestaurantID(ctx, restId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRestaurantID", reflect.TypeOf((*MockMenuRepo)(nil).ListByRestaurantID), ctx, restId)
}

// Restore mocks base method.
func (m *MockMenuRepo) Restore(ctx context.Context, ids ...uint64) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Restore", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockMenuRepoMockRecorder) Restore(ctx interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockMenuRepo)(nil).Restore), varargs...)
}

// Update mocks base method.
func (m *MockMenuRepo) Update(ctx context.Context, items ...model.MenuItem) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMenuRepoMockRecorder) Update(ctx interface{}, items ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMenuRepo)(nil).Update), varargs...)
}
